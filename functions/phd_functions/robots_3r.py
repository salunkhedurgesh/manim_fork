from functions.phd_functions.robot_constants import *
from functions.phd_functions.maple_functions import *
from functions.phd_functions.robot_functions import *
from functions.maths_functions.maths_phd import *
from sympy import *
import sympy as sp


def get_small_plot(edge=None, label=False, xvalue=None, yvalue=None, xconfig=None, yconfig=None, only_labels=False, box_opacity=1, label_list=None, label_position="corner", buff=SMALL_BUFF * 2, big_plot=False):
    big_plot_size = 6.4
    if big_plot:
        small_plot_size = big_plot_size
    else:
        small_plot_size = 4

    if xvalue is None:
        xvalue = (-3.2, 3.2)
    if yvalue is None:
        yvalue = (-3.2, 3.2)

    if xconfig is None:
        xconfig = dict(stroke_width=0.001, opacity=0, include_ticks=False, stroke_color=BLACK)
    if yconfig is None:
        yconfig = dict(stroke_width=0.001, opacity=0, include_ticks=False, stroke_color=BLACK)

    plot_to_return = Axes(
        x_range=xvalue,
        y_range=yvalue,
        y_axis_config=yconfig,
        x_axis_config=xconfig,
        width=small_plot_size,
        height=small_plot_size
    )
    width = height = small_plot_size
    shift_buff = 0.85
    if edge is not None:
        plot_to_return.to_edge(edge, buff=buff)
    box = SurroundingRectangle(plot_to_return, stroke_width=1, buff=0, stroke_opacity=box_opacity)
    if label_list is None:
        label_list = [r"""$(\pi, \pi)$""""", r"""(-$\pi$, -$\pi$)"""""]
    top_right = TexText(label_list[0]).move_to(plot_to_return.get_center())
    bottom_left = TexText(label_list[1]).move_to(plot_to_return.get_center())

    if label_position == "corner":
        horizontal_shift = [width * shift_buff / 2, -width * shift_buff / 2]
        vertical_shift = [height * 1.1 / 2, -height * 1.1 / 2]
    elif label_position == "center":
        horizontal_shift = [-width * 1.1 / 2, 0]
        vertical_shift = [0, -height * 1.1 / 2]
    else:
        horizontal_shift = [-width * 0.1 / 2, 0]
        vertical_shift = [0, -height * 1.1 / 2]

    top_right.shift(np.array([horizontal_shift[0], vertical_shift[0], 0]))
    bottom_left.shift(np.array([horizontal_shift[1], vertical_shift[1], 0]))
    second_element = Group(box, top_right, bottom_left) if label else box
    if only_labels: second_element = Group(top_right, bottom_left)


    return plot_to_return, second_element


def get_det_plot(edge=None, value=None, big_plot=False):
    big_plot_size = 6.4
    if big_plot:
        small_plot_size = big_plot_size
    else:
        small_plot_size = 4

    if value is None:
        y_range = (-5, 5)
    elif value == 'pos':
        y_range = (-1, 10)
    else:
        y_range = (-10, 1)

    plot_to_return = Axes(
        x_range=(-1, 10),
        y_range=y_range,
        x_axis_config=dict(include_ticks=False),
    )
    plot_to_return.set_height(small_plot_size)
    plot_to_return.set_width(small_plot_size)
    if edge is not None:
        plot_to_return.to_edge(edge, buff=SMALL_BUFF * 2)
    box = SurroundingRectangle(plot_to_return, stroke_width=1, buff=0)

    return plot_to_return, box


def get_critv():
    return lambda rho, z: 65536 * rho ** 16 + 524288 * z ** 2 * rho ** 14 + 1835008 * z ** 4 * rho ** 12 + 3670016 * z ** 6 * rho ** 10 + 4587520 * z ** 8 * rho ** 8 + 3670016 * z ** 10 * rho ** 6 + 1835008 * z ** 12 * rho ** 4 + 524288 * z ** 14 * rho ** 2 + 65536 * z ** 16 - 2228224 * rho ** 14 - 16121856 * z ** 2 * rho ** 12 - 49938432 * z ** 4 * rho ** 10 - 85852160 * z ** 6 * rho ** 8 - 88473600 * z ** 8 * rho ** 6 - 54657024 * z ** 10 * rho ** 4 - 18743296 * z ** 12 * rho ** 2 - 2752512 * z ** 14 + 20692992 * rho ** 12 + 133332992 * z ** 2 * rho ** 10 + 369901568 * z ** 4 * rho ** 8 + 560136192 * z ** 6 * rho ** 6 + 483934208 * z ** 8 * rho ** 4 + 224559104 * z ** 10 * rho ** 2 + 43499520 * z ** 12 - 82698240 * rho ** 10 - 98885632 * z ** 2 * rho ** 8 - 253280256 * z ** 4 * rho ** 6 - 842514432 * z ** 6 * rho ** 4 - 907239424 * z ** 8 * rho ** 2 - 301817856 * z ** 10 + 305178112 * rho ** 8 - 2765285376 * z ** 2 * rho ** 6 - 3004079104 * z ** 4 * rho ** 4 + 480122880 * z ** 6 * rho ** 2 + 749282816 * z ** 8 - 714739200 * rho ** 6 + 7322492416 * z ** 2 * rho ** 4 - 6911564288 * z ** 4 * rho ** 2 + 160135680 * z ** 6 + 1117824960 * rho ** 4 + 964516736 * z ** 2 * rho ** 2 + 195134400 * z ** 4 - 1675600160 * rho ** 2 + 99657312 * z ** 2 + 12271009

def get_critv_parabola():
    return lambda rho, z: -0.8540062557e6 * z ** 2 * rho ** 16 - 0.1364372448e8 * z ** 15 * rho ** 2 - 0.4137880338e8 * z ** 13 * rho ** 4 - 0.9340938935e8 * z ** 11 * rho ** 6 - 0.1372284491e9 * z ** 9 * rho ** 8 - 0.1170840168e9 * z ** 7 * rho ** 10 - 0.5304494715e8 * z ** 5 * rho ** 12 - 0.1063561708e8 * z ** 3 * rho ** 14 - 0.4838231500e6 * z * rho ** 16 + 0.1087629110e9 * z ** 14 * rho ** 2 + 0.1465105241e9 * z ** 12 * rho ** 4 + 0.8612594359e8 * z ** 10 * rho ** 6 + 0.9519190713e8 * z ** 8 * rho ** 8 + 0.1569369962e9 * z ** 6 * rho ** 10 + 0.1104805931e9 * z ** 4 * rho ** 12 + 0.2845110034e8 * z ** 2 * rho ** 14 - 0.2360362692e9 * z ** 13 * rho ** 2 - 0.1985424820e9 * z ** 11 * rho ** 4 + 0.6267082059e9 * z ** 9 * rho ** 6 + 0.1229190449e10 * z ** 7 * rho ** 8 + 0.6888746133e9 * z ** 5 * rho ** 10 + 0.8134698133e8 * z ** 3 * rho ** 12 - 0.1270125883e8 * z * rho ** 14 - 0.5712872571e9 * z ** 12 * rho ** 2 + 0.4097923716e9 * z ** 10 * rho ** 4 + 0.2931075073e9 * z ** 8 * rho ** 6 - 0.2346047818e10 * z ** 6 * rho ** 8 - 0.2444694729e10 * z ** 4 * rho ** 10 - 0.5523778384e9 * z ** 2 * rho ** 12 + 0.5795311636e10 * z ** 11 * rho ** 2 + 0.2088719878e10 * z ** 9 * rho ** 4 - 0.1144436567e11 * z ** 7 * rho ** 6 - 0.8541208341e10 * z ** 5 * rho ** 8 + 0.1416490378e10 * z ** 3 * rho ** 10 + 0.6037275107e9 * z * rho ** 12 - 0.1522336788e11 * z ** 10 * rho ** 2 - 0.3308600428e11 * z ** 8 * rho ** 4 + 0.1101142960e11 * z ** 6 * rho ** 6 + 0.4255601843e11 * z ** 4 * rho ** 8 + 0.5571848049e10 * z ** 2 * rho ** 10 - 0.1861787764e11 * z ** 9 * rho ** 2 + 0.1074753477e12 * z ** 7 * rho ** 4 + 0.1531332161e12 * z ** 5 * rho ** 6 - 0.6613085727e11 * z ** 3 * rho ** 8 - 0.1041654880e11 * z * rho ** 10 + 0.1855302065e12 * z ** 8 * rho ** 2 + 0.2017783287e12 * z ** 6 * rho ** 4 - 0.7101089208e12 * z ** 4 * rho ** 6 + 0.1628004432e11 * z ** 2 * rho ** 8 + 0.2928677487e12 * z ** 7 * rho ** 2 - 0.2712105739e13 * z ** 5 * rho ** 4 - 0.5318741423e15 * z + 0.9246471428e14 * z ** 6 + 0.5554363998e15 * z ** 4 + 0.2383559906e6 * z ** 19 - 0.2647741606e7 * z ** 17 - 0.4367799862e8 * z ** 15 + 0.1295224497e10 * z ** 13 + 0.1470764983e13 * z ** 3 * rho ** 6 + 0.6354252306e11 * z * rho ** 8 - 0.6823337483e13 * z ** 6 * rho ** 2 + 0.1014531763e14 * z ** 4 * rho ** 4 - 0.1591930798e13 * z ** 2 * rho ** 6 + 0.3448752279e14 * z ** 5 * rho ** 2 - 0.2125674615e14 * z ** 3 * rho ** 4 + 0.7690859408e12 * z * rho ** 6 - 0.1000021153e15 * z ** 4 * rho ** 2 + 0.2676147104e14 * z ** 2 * rho ** 4 + 0.1867181353e15 * z ** 3 * rho ** 2 - 0.1894346091e14 * z * rho ** 4 - 0.2236434430e15 * z ** 2 * rho ** 2 + 0.1575447105e15 * z * rho ** 2 - 0.2649844451e11 * z ** 11 - 0.4985023988e14 * rho ** 2 + 0.8517092921e15 * z ** 2 - 0.7557447937e12 * z ** 9 - 0.8237106032e4 * z ** 21 - 0.1506796202e-1 * z ** 25 + 0.1234502949e3 * z ** 23 - 0.2602348025e-1 * z ** 27 - 0.3776400463e-7 * z ** 31 + 0.2856516123e-3 * z ** 29 - 0.7955112271e-8 * z ** 33 - 0.1645388501e-13 * z ** 37 - 0.6952482319e-12 * z ** 35 + 0.4732839395e-16 * z ** 39 + 0.2201537778e-18 * rho ** 40 + 0.2086352294e-16 * rho ** 38 + 0.2620820275e-13 * rho ** 36 - 0.7076967251e-11 * rho ** 34 - 0.1814249686e-6 * rho ** 30 + 0.7619097288e-9 * rho ** 32 + 0.2934009380e-4 * rho ** 28 - 0.2658962496e-2 * rho ** 26 + 0.2846551830e0 * rho ** 24 - 0.2898912000e2 * rho ** 22 + 0.1034356332e4 * z ** 22 + 0.6560224972e0 * z ** 26 - 0.3652808172e2 * z ** 24 - 0.6615039584e-2 * z ** 28 - 0.6544969419e8 * rho ** 12 - 0.1029110269e-6 * z ** 32 + 0.3553109236e-4 * z ** 30 + 0.5463958387e-12 * z ** 36 + 0.3709445174e-9 * z ** 34 + 0.1855383447e-14 * z ** 38 + 0.2110053406e-17 * z ** 40 + 0.1531230631e15 - 0.5679759301e6 * z ** 13 * rho ** 8 - 0.5944609735e6 * z ** 11 * rho ** 10 + 0.1827352607e6 * z ** 14 * rho ** 8 + 0.1992393290e6 * z ** 12 * rho ** 10 + 0.1473889177e6 * z ** 10 * rho ** 12 + 0.7250644262e5 * z ** 8 * rho ** 14 + 0.2225329721e5 * z ** 6 * rho ** 16 + 0.3584381813e4 * z ** 4 * rho ** 18 + 0.1175595965e3 * z ** 2 * rho ** 20 - 0.5896344277e5 * z ** 19 * rho ** 2 - 0.1945319348e6 * z ** 17 * rho ** 4 - 0.3977375512e6 * z ** 15 * rho ** 6 + 0.7949854644e4 * z ** 9 * rho ** 14 + 0.4350943648e4 * z ** 7 * rho ** 16 + 0.1587410076e4 * z ** 5 * rho ** 18 + 0.3400281516e3 * z ** 3 * rho ** 20 + 0.3201887051e2 * z * rho ** 22 + 0.1025148464e5 * z ** 20 * rho ** 2 + 0.4461257267e5 * z ** 18 * rho ** 4 + 0.1125893100e6 * z ** 16 * rho ** 6 - 0.6972251310e3 * z ** 6 * rho ** 18 - 0.1157320389e3 * z ** 4 * rho ** 20 - 0.7450429333e1 * z ** 2 * rho ** 22 + 0.9099412944e3 * z ** 21 * rho ** 2 + 0.3045169272e4 * z ** 19 * rho ** 4 + 0.6290352687e4 * z ** 17 * rho ** 6 + 0.9349221801e4 * z ** 15 * rho ** 8 + 0.1100923457e5 * z ** 13 * rho ** 10 + 0.1056999912e5 * z ** 11 * rho ** 12 - 0.1225890537e2 * z ** 5 * rho ** 20 - 0.3564048474e1 * z ** 3 * rho ** 22 - 0.3892329715e0 * z * rho ** 24 - 0.3697307686e3 * z ** 22 * rho ** 2 - 0.1683376301e4 * z ** 20 * rho ** 4 - 0.4557043840e4 * z ** 18 * rho ** 6 - 0.8158416335e4 * z ** 16 * rho ** 8 - 0.1015025281e5 * z ** 14 * rho ** 10 - 0.8959191036e4 * z ** 12 * rho ** 12 - 0.5609687898e4 * z ** 10 * rho ** 14 - 0.2438431738e4 * z ** 8 * rho ** 16 + 0.1203756991e0 * z ** 2 * rho ** 24 + 0.3502848556e1 * z ** 23 * rho ** 2 + 0.3048810375e2 * z ** 21 * rho ** 4 + 0.1158892571e3 * z ** 19 * rho ** 6 + 0.2540963844e3 * z ** 17 * rho ** 8 + 0.3518508643e3 * z ** 15 * rho ** 10 + 0.3126714852e3 * z ** 13 * rho ** 12 + 0.1672600473e3 * z ** 11 * rho ** 14 + 0.3720588464e2 * z ** 9 * rho ** 16 - 0.1314031710e2 * z ** 7 * rho ** 18 + 0.7070922040e1 * z ** 24 * rho ** 2 + 0.3468686858e2 * z ** 22 * rho ** 4 + 0.1024835108e3 * z ** 20 * rho ** 6 + 0.2032732203e3 * z ** 18 * rho ** 8 + 0.2854034907e3 * z ** 16 * rho ** 10 + 0.2911405208e3 * z ** 14 * rho ** 12 + 0.2176400938e3 * z ** 12 * rho ** 14 + 0.1184398644e3 * z ** 10 * rho ** 16 + 0.4577656768e2 * z ** 8 * rho ** 18 + 0.1190465134e2 * z ** 6 * rho ** 20 + 0.1849597553e1 * z ** 4 * rho ** 22 - 0.6054788678e1 * z ** 21 * rho ** 6 - 0.1330353438e2 * z ** 19 * rho ** 8 - 0.2036932190e2 * z ** 17 * rho ** 10 - 0.2223399653e2 * z ** 15 * rho ** 12 - 0.1733271438e2 * z ** 13 * rho ** 14 - 0.9451962686e1 * z ** 11 * rho ** 16 - 0.3400471263e1 * z ** 9 * rho ** 18 - 0.6830497116e0 * z ** 7 * rho ** 20 - 0.2179695698e-1 * z ** 5 * rho ** 22 + 0.2008730431e-1 * z ** 3 * rho ** 24 + 0.3071181375e-2 * z * rho ** 26 - 0.5187110501e1 * z ** 16 * rho ** 12 - 0.4507162623e1 * z ** 14 * rho ** 14 - 0.2935034531e1 * z ** 12 * rho ** 16 - 0.1415612387e1 * z ** 10 * rho ** 18 - 0.4913721154e0 * z ** 8 * rho ** 20 - 0.1157962118e0 * z ** 6 * rho ** 22 - 0.1631493762e-1 * z ** 4 * rho ** 24 - 0.9228951387e-3 * z ** 2 * rho ** 26 - 0.3257060392e0 * z ** 25 * rho ** 2 - 0.1823248548e1 * z ** 23 * rho ** 4 + 0.1023462862e0 * z ** 11 * rho ** 18 + 0.3200947847e-1 * z ** 9 * rho ** 20 + 0.5461516574e-2 * z ** 7 * rho ** 22 + 0.2233027072e-4 * z ** 5 * rho ** 24 - 0.1721665738e-3 * z ** 3 * rho ** 26 - 0.2266011021e-4 * z * rho ** 28 - 0.7624054887e-1 * z ** 26 * rho ** 2 - 0.4036717907e0 * z ** 24 * rho ** 4 - 0.1300563432e1 * z ** 22 * rho ** 6 - 0.2846078438e1 * z ** 20 * rho ** 8 - 0.4469869915e1 * z ** 18 * rho ** 10 + 0.9485696988e-4 * z ** 4 * rho ** 26 + 0.4745624818e-5 * z ** 2 * rho ** 28 + 0.3622212670e-2 * z ** 27 * rho ** 2 + 0.2099790587e-1 * z ** 25 * rho ** 4 + 0.7366559059e-1 * z ** 23 * rho ** 6 + 0.1743847917e0 * z ** 21 * rho ** 8 + 0.2937804940e0 * z ** 19 * rho ** 10 + 0.3615452817e0 * z ** 17 * rho ** 12 + 0.3277751404e0 * z ** 15 * rho ** 14 + 0.2172562944e0 * z ** 13 * rho ** 16 + 0.2575690851e-2 * z ** 26 * rho ** 4 + 0.9160497425e-2 * z ** 24 * rho ** 6 + 0.2234674912e-1 * z ** 22 * rho ** 8 + 0.3956556001e-1 * z ** 20 * rho ** 10 + 0.5244862613e-1 * z ** 18 * rho ** 12 + 0.5290141961e-1 * z ** 16 * rho ** 14 + 0.4081237064e-1 * z ** 14 * rho ** 16 + 0.2397098401e-1 * z ** 12 * rho ** 18 + 0.1054834707e-1 * z ** 10 * rho ** 20 + 0.3366436240e-2 * z ** 8 * rho ** 22 + 0.7320710691e-3 * z ** 6 * rho ** 24 + 0.9886011803e-4 * z ** 17 * rho ** 14 + 0.2509602689e-3 * z ** 15 * rho ** 16 + 0.3167763273e-3 * z ** 13 * rho ** 18 + 0.2622258576e-3 * z ** 11 * rho ** 20 + 0.1505261901e-3 * z ** 9 * rho ** 22 + 0.5981223136e-4 * z ** 7 * rho ** 24 + 0.1577883670e-4 * z ** 5 * rho ** 26 + 0.2493876203e-5 * z ** 3 * rho ** 28 + 0.1790397303e-6 * z * rho ** 30 + 0.4445587559e-3 * z ** 28 * rho ** 2 - 0.3648011647e-6 * z ** 4 * rho ** 28 - 0.1523019709e-7 * z ** 2 * rho ** 30 - 0.7588466195e-6 * z ** 29 * rho ** 2 - 0.5735723867e-5 * z ** 27 * rho ** 4 - 0.2321415459e-4 * z ** 25 * rho ** 6 - 0.5595076235e-4 * z ** 23 * rho ** 8 - 0.7739940830e-4 * z ** 21 * rho ** 10 - 0.3301988144e-4 * z ** 19 * rho ** 12 - 0.9537026189e-5 * z ** 28 * rho ** 4 - 0.3846584354e-4 * z ** 26 * rho ** 6 - 0.1067968647e-3 * z ** 24 * rho ** 8 - 0.2162639788e-3 * z ** 22 * rho ** 10 - 0.3300381098e-3 * z ** 20 * rho ** 12 - 0.3865607444e-3 * z ** 18 * rho ** 14 - 0.3503500375e-3 * z ** 16 * rho ** 16 - 0.2456552733e-3 * z ** 14 * rho ** 18 - 0.1320898315e-3 * z ** 12 * rho ** 20 - 0.5341228989e-4 * z ** 10 * rho ** 22 - 0.1566834693e-4 * z ** 8 * rho ** 24 - 0.3118869252e-5 * z ** 6 * rho ** 26 - 0.2890827974e-4 * z ** 17 * rho ** 16 - 0.2212128696e-4 * z ** 15 * rho ** 18 - 0.1339156802e-4 * z ** 13 * rho ** 20 - 0.6350217479e-5 * z ** 11 * rho ** 22 - 0.2313368185e-5 * z ** 9 * rho ** 24 - 0.6259686477e-6 * z ** 7 * rho ** 26 - 0.1186163382e-6 * z ** 5 * rho ** 28 - 0.1405328256e-7 * z ** 3 * rho ** 30 - 0.7832970904e-9 * z * rho ** 32 - 0.1454937652e-5 * z ** 30 * rho ** 2 + 0.1520261199e-8 * z ** 6 * rho ** 28 - 0.2599044199e-9 * z ** 4 * rho ** 30 - 0.8403591152e-10 * z ** 2 * rho ** 32 - 0.1087017126e-6 * z ** 31 * rho ** 2 - 0.6954045258e-6 * z ** 29 * rho ** 4 - 0.2765982601e-5 * z ** 27 * rho ** 6 - 0.7660217764e-5 * z ** 25 * rho ** 8 - 0.1567275567e-4 * z ** 23 * rho ** 10 - 0.2452379711e-4 * z ** 21 * rho ** 12 - 0.2996102375e-4 * z ** 19 * rho ** 14 + 0.1445145756e-6 * z ** 28 * rho ** 6 + 0.4122190047e-6 * z ** 26 * rho ** 8 + 0.8631040294e-6 * z ** 24 * rho ** 10 + 0.1370659929e-5 * z ** 22 * rho ** 12 + 0.1681386418e-5 * z ** 20 * rho ** 14 + 0.1606351252e-5 * z ** 18 * rho ** 16 + 0.1194727576e-5 * z ** 16 * rho ** 18 + 0.6850564440e-6 * z ** 14 * rho ** 20 + 0.2960289896e-6 * z ** 12 * rho ** 22 + 0.9199845684e-7 * z ** 10 * rho ** 24 + 0.1841812285e-7 * z ** 8 * rho ** 26 + 0.2724500121e-7 * z ** 17 * rho ** 18 + 0.2267901947e-7 * z ** 15 * rho ** 20 + 0.1475636727e-7 * z ** 13 * rho ** 22 + 0.7432563200e-8 * z ** 11 * rho ** 24 + 0.2841765824e-8 * z ** 9 * rho ** 26 + 0.7971822810e-9 * z ** 7 * rho ** 28 + 0.1546583212e-9 * z ** 5 * rho ** 30 + 0.1852393507e-10 * z ** 3 * rho ** 32 + 0.1030611986e-11 * z * rho ** 34 + 0.5281031243e-8 * z ** 32 * rho ** 2 + 0.3510150487e-7 * z ** 30 * rho ** 4 + 0.5262247229e-12 * z ** 2 * rho ** 34 - 0.5201385643e-11 * z ** 33 * rho ** 2 + 0.2650069458e-11 * z ** 31 * rho ** 4 + 0.1973978637e-9 * z ** 29 * rho ** 6 + 0.1223700098e-8 * z ** 27 * rho ** 8 + 0.4316343587e-8 * z ** 25 * rho ** 10 + 0.1046741834e-7 * z ** 23 * rho ** 12 + 0.1873560409e-7 * z ** 21 * rho ** 14 + 0.2562260524e-7 * z ** 19 * rho ** 16 + 0.3676753230e-8 * z ** 24 * rho ** 12 + 0.5277445626e-8 * z ** 22 * rho ** 14 + 0.6061317006e-8 * z ** 20 * rho ** 16 + 0.5613376657e-8 * z ** 18 * rho ** 18 + 0.4203502349e-8 * z ** 16 * rho ** 20 + 0.2541100956e-8 * z ** 14 * rho ** 22 + 0.1232387086e-8 * z ** 12 * rho ** 24 + 0.4738826423e-9 * z ** 10 * rho ** 26 + 0.1416873514e-9 * z ** 8 * rho ** 28 + 0.3190735336e-10 * z ** 6 * rho ** 30 + 0.5122057898e-11 * z ** 4 * rho ** 32 - 0.1987384295e-11 * z ** 7 * rho ** 30 - 0.3565958965e-12 * z ** 5 * rho ** 32 - 0.4070765147e-13 * z ** 3 * rho ** 34 - 0.2221091102e-14 * z * rho ** 36 + 0.8352702046e-11 * z ** 34 * rho ** 2 + 0.6016407100e-10 * z ** 32 * rho ** 4 + 0.2712918461e-9 * z ** 30 * rho ** 6 + 0.8581124275e-9 * z ** 28 * rho ** 8 + 0.2021734176e-8 * z ** 26 * rho ** 10 - 0.2747880571e-10 * z ** 29 * rho ** 8 - 0.6607252937e-10 * z ** 27 * rho ** 10 - 0.1231247427e-9 * z ** 25 * rho ** 12 - 0.1820673228e-9 * z ** 23 * rho ** 14 - 0.2169373171e-9 * z ** 21 * rho ** 16 - 0.2102432931e-9 * z ** 19 * rho ** 18 - 0.1664707989e-9 * z ** 17 * rho ** 20 - 0.1076671100e-9 * z ** 15 * rho ** 22 - 0.5657031072e-10 * z ** 13 * rho ** 24 - 0.2385772669e-10 * z ** 11 * rho ** 26 - 0.7906617121e-11 * z ** 9 * rho ** 28 + 0.7119847067e-11 * z ** 12 * rho ** 26 + 0.2419469413e-11 * z ** 10 * rho ** 28 + 0.6202899388e-12 * z ** 8 * rho ** 30 + 0.1141201854e-12 * z ** 6 * rho ** 32 + 0.1381540578e-13 * z ** 4 * rho ** 34 + 0.9240367555e-15 * z ** 2 * rho ** 36 - 0.2550422466e-12 * z ** 35 * rho ** 2 - 0.1863808365e-11 * z ** 33 * rho ** 4 - 0.8536555370e-11 * z ** 31 * rho ** 6 + 0.4422186240e-11 * z ** 30 * rho ** 8 + 0.1162440730e-10 * z ** 28 * rho ** 10 + 0.2364138184e-10 * z ** 26 * rho ** 12 + 0.3804069736e-10 * z ** 24 * rho ** 14 + 0.4910161939e-10 * z ** 22 * rho ** 16 + 0.5123322450e-10 * z ** 20 * rho ** 18 + 0.4333076345e-10 * z ** 18 * rho ** 20 + 0.2965015182e-10 * z ** 16 * rho ** 22 + 0.1630666468e-10 * z ** 14 * rho ** 24 + 0.1805395356e-12 * z ** 11 * rho ** 28 + 0.5498271385e-13 * z ** 9 * rho ** 30 + 0.1254065892e-13 * z ** 7 * rho ** 32 + 0.2016148824e-14 * z ** 5 * rho ** 34 + 0.2037894734e-15 * z ** 3 * rho ** 36 + 0.9743097931e-17 * z * rho ** 38 + 0.3138946517e-13 * z ** 36 * rho ** 2 + 0.2506892069e-12 * z ** 34 * rho ** 4 + 0.1255830098e-11 * z ** 32 * rho ** 6 + 0.1373348004e-12 * z ** 31 * rho ** 8 + 0.3818226950e-12 * z ** 29 * rho ** 10 + 0.8244591963e-12 * z ** 27 * rho ** 12 + 0.1414884132e-11 * z ** 25 * rho ** 14 + 0.1958385527e-11 * z ** 23 * rho ** 16 + 0.2205550310e-11 * z ** 21 * rho ** 18 + 0.2029411209e-11 * z ** 19 * rho ** 20 + 0.1525662581e-11 * z ** 17 * rho ** 22 + 0.9332362247e-12 * z ** 15 * rho ** 24 + 0.4604216965e-12 * z ** 13 * rho ** 26 + 0.1750276431e-13 * z ** 12 * rho ** 28 + 0.6227325848e-14 * z ** 10 * rho ** 30 + 0.1729191468e-14 * z ** 8 * rho ** 32 + 0.3611557160e-15 * z ** 6 * rho ** 34 + 0.5337338097e-16 * z ** 4 * rho ** 36 + 0.4976407112e-17 * z ** 2 * rho ** 38 + 0.8383534957e-15 * z ** 37 * rho ** 2 + 0.7023595704e-14 * z ** 35 * rho ** 4 + 0.3699349091e-13 * z ** 33 * rho ** 6 + 0.3250153000e-15 * z ** 36 * rho ** 4 + 0.1753698315e-14 * z ** 34 * rho ** 6 + 0.6697044411e-14 * z ** 32 * rho ** 8 + 0.1924003346e-13 * z ** 30 * rho ** 10 + 0.4314648657e-13 * z ** 28 * rho ** 12 + 0.7733845388e-13 * z ** 26 * rho ** 14 + 0.1125337349e-12 * z ** 24 * rho ** 16 + 0.1342339700e-12 * z ** 22 * rho ** 18 + 0.1319764056e-12 * z ** 20 * rho ** 20 + 0.1071366354e-12 * z ** 18 * rho ** 22 + 0.7168359207e-13 * z ** 16 * rho ** 24 + 0.3931567676e-13 * z ** 14 * rho ** 26 + 0.3801246320e-16 * z ** 38 * rho ** 2 - 0.2466844932e6 * z ** 7 * rho ** 14 - 0.4558081370e6 * z ** 9 * rho ** 12 - 0.8777125155e5 * z ** 5 * rho ** 16 - 0.1806691613e5 * z ** 3 * rho ** 18 - 0.1588857010e4 * z * rho ** 20 - 0.7279659111e5 * z ** 18 * rho ** 2 - 0.4545369024e6 * z ** 16 * rho ** 4 - 0.1283318232e7 * z ** 14 * rho ** 6 - 0.2030783358e7 * z ** 12 * rho ** 8 - 0.1922689208e7 * z ** 10 * rho ** 10 - 0.1073847477e7 * z ** 8 * rho ** 12 - 0.3096006622e6 * z ** 6 * rho ** 14 - 0.1783509853e5 * z ** 4 * rho ** 16 + 0.1159593425e5 * z ** 2 * rho ** 18 + 0.1524737825e7 * z ** 17 * rho ** 2 + 0.4604911658e7 * z ** 15 * rho ** 4 + 0.8859144802e7 * z ** 13 * rho ** 6 + 0.1191582830e8 * z ** 11 * rho ** 8 + 0.1121774612e8 * z ** 9 * rho ** 10 + 0.7063014210e7 * z ** 7 * rho ** 12 + 0.2748656326e7 * z ** 5 * rho ** 14 + 0.5732453951e6 * z ** 3 * rho ** 16 + 0.4502952075e5 * z * rho ** 18 - 0.3640574020e7 * z ** 16 * rho ** 2 - 0.4847551939e7 * z ** 14 * rho ** 4 + 0.5771571052e6 * z ** 12 * rho ** 6 + 0.6024285539e7 * z ** 10 * rho ** 8 + 0.3037328012e7 * z ** 8 * rho ** 10 - 0.2309581980e7 * z ** 6 * rho ** 12 - 0.2699034088e7 * z ** 4 * rho ** 14 - 0.2371065689e14 * z ** 7 - 0.1937526605e8 * rho ** 14 - 0.2650650362e15 * z ** 5 + 0.1737537825e7 * rho ** 16 - 0.8334394949e15 * z ** 3 - 0.7485726378e5 * rho ** 18 + 0.1894271063e4 * rho ** 20 - 0.1696615311e4 * z ** 20 - 0.8131574546e6 * z ** 18 + 0.2642166337e8 * z ** 16 + 0.5783254934e13 * rho ** 4 - 0.2671332529e9 * z ** 14 - 0.5556676843e11 * rho ** 6 + 0.8117957407e9 * z ** 12 - 0.5194630864e11 * rho ** 8 + 0.1436640250e12 * z ** 10 + 0.4897436885e10 * rho ** 10 + 0.4563730901e13 * z ** 8

def get_critv_ellipse():
    return lambda rho, z: -0.4759452458e141 * z - 0.1421319949e141 * rho ** 2 + 0.4452642552e141 * z ** 2 + 0.1734726437e141 - 0.5159354171e139 * rho ** 6 * z ** 5 - 0.5049613889e139 * rho ** 4 * z ** 7 - 0.1601778461e139 * rho ** 2 * z ** 9 + 0.3381178534e139 * rho ** 8 * z ** 2 + 0.4257467504e139 * rho ** 6 * z ** 4 - 0.4273843801e139 * rho ** 4 * z ** 6 - 0.7858660391e139 * rho ** 2 * z ** 8 - 0.3161221309e139 * rho ** 8 * z + 0.9870416420e139 * rho ** 6 * z ** 3 + 0.3101019052e140 * rho ** 4 * z ** 5 + 0.2282663831e140 * rho ** 2 * z ** 7 - 0.2747680215e140 * rho ** 6 * z ** 2 - 0.3470580959e140 * rho ** 4 * z ** 4 + 0.2681460385e139 * rho ** 2 * z ** 6 + 0.2650791128e140 * rho ** 6 * z - 0.3824824479e140 * rho ** 4 * z ** 3 - 0.9864632327e140 * rho ** 2 * z ** 5 + 0.1365247817e141 * rho ** 4 * z ** 2 + 0.1354616796e141 * rho ** 2 * z ** 4 - 0.1360639611e141 * rho ** 4 * z + 0.7365125184e140 * rho ** 2 * z ** 3 - 0.3781724341e141 * rho ** 2 * z ** 2 + 0.3899265279e141 * rho ** 2 * z + 0.1527373399e131 * rho ** 6 * z ** 18 + 0.7884914470e130 * rho ** 4 * z ** 20 + 0.2325450786e130 * rho ** 2 * z ** 22 + 0.1728413856e120 * rho ** 22 * z - 0.2934844244e124 * rho ** 20 * z ** 3 + 0.6349074797e127 * rho ** 18 * z ** 5 - 0.5267328323e130 * rho ** 16 * z ** 7 - 0.4376648760e131 * rho ** 14 * z ** 9 - 0.1584827060e132 * rho ** 12 * z ** 11 - 0.3275768326e132 * rho ** 10 * z ** 13 - 0.4229571316e132 * rho ** 8 * z ** 15 - 0.3493913141e132 * rho ** 6 * z ** 17 - 0.1803412365e132 * rho ** 4 * z ** 19 - 0.5317951458e131 * rho ** 2 * z ** 21 + 0.1359258990e125 * rho ** 20 * z ** 2 - 0.4552097254e128 * rho ** 18 * z ** 4 + 0.5307074552e131 * rho ** 16 * z ** 6 + 0.4191756405e132 * rho ** 14 * z ** 8 + 0.1443505325e133 * rho ** 12 * z ** 10 + 0.2836273872e133 * rho ** 10 * z ** 12 + 0.3479283360e133 * rho ** 8 * z ** 14 + 0.2729142858e133 * rho ** 6 * z ** 16 + 0.1336955499e133 * rho ** 4 * z ** 18 + 0.3740247587e132 * rho ** 2 * z ** 20 - 0.2816149491e125 * rho ** 20 * z + 0.1734343087e129 * rho ** 18 * z ** 3 - 0.3064976504e132 * rho ** 16 * z ** 5 - 0.2057396344e133 * rho ** 14 * z ** 7 - 0.5761202153e133 * rho ** 12 * z ** 9 - 0.8551941750e133 * rho ** 10 * z ** 11 - 0.6874692892e133 * rho ** 8 * z ** 13 - 0.2373008744e133 * rho ** 6 * z ** 15 + 0.4106010726e132 * rho ** 4 * z ** 17 + 0.5821846637e132 * rho ** 2 * z ** 19 - 0.3704081079e129 * rho ** 18 * z ** 2 + 0.1109554920e133 * rho ** 16 * z ** 4 + 0.4347349230e133 * rho ** 14 * z ** 6 - 0.3400603077e132 * rho ** 12 * z ** 8 - 0.3112441366e134 * rho ** 10 * z ** 10 - 0.7608250015e134 * rho ** 8 * z ** 12 - 0.8987792481e134 * rho ** 6 * z ** 14 - 0.5906848558e134 * rho ** 4 * z ** 16 - 0.2080315876e134 * rho ** 2 * z ** 18 + 0.4199793710e129 * rho ** 18 * z - 0.2577877563e133 * rho ** 16 * z ** 3 + 0.6503900900e133 * rho ** 14 * z ** 5 + 0.1019563304e135 * rho ** 12 * z ** 7 + 0.3308135029e135 * rho ** 10 * z ** 9 + 0.5330770132e135 * rho ** 8 * z ** 11 + 0.4912699692e135 * rho ** 6 * z ** 13 + 0.2629142615e135 * rho ** 4 * z ** 15 + 0.7584295011e134 * rho ** 2 * z ** 17 + 0.3753356464e133 * rho ** 16 * z ** 2 - 0.6935365163e134 * rho ** 14 * z ** 4 - 0.4135491727e135 * rho ** 12 * z ** 6 - 0.8347920273e135 * rho ** 10 * z ** 8 - 0.6614070406e135 * rho ** 8 * z ** 10 + 0.6894938667e134 * rho ** 6 * z ** 12 + 0.4690851825e135 * rho ** 4 * z ** 14 + 0.2938637094e135 * rho ** 2 * z ** 16 - 0.3130851947e133 * rho ** 16 * z + 0.2066219963e135 * rho ** 14 * z ** 3 + 0.4791106312e135 * rho ** 12 * z ** 5 - 0.1215704766e136 * rho ** 10 * z ** 7 - 0.5843324602e136 * rho ** 8 * z ** 9 - 0.9043258639e136 * rho ** 6 * z ** 11 - 0.6986716211e136 * rho ** 4 * z ** 13 - 0.2735163135e136 * rho ** 2 * z ** 15 - 0.3281168810e135 * rho ** 14 * z ** 2 + 0.1528975487e136 * rho ** 12 * z ** 4 + 0.1197490531e137 * rho ** 10 * z ** 6 + 0.2600079257e137 * rho ** 8 * z ** 8 + 0.2636618627e137 * rho ** 6 * z ** 10 + 0.1298526519e137 * rho ** 4 * z ** 12 + 0.2480381599e136 * rho ** 2 * z ** 14 + 0.2809243899e135 * rho ** 14 * z - 0.7018235920e136 * rho ** 12 * z ** 3 - 0.2433516631e137 * rho ** 10 * z ** 5 - 0.1443362077e137 * rho ** 8 * z ** 7 + 0.3617254992e137 * rho ** 6 * z ** 9 + 0.6292725955e137 * rho ** 4 * z ** 11 + 0.3720259581e137 * rho ** 2 * z ** 13 + 0.1235281350e137 * rho ** 12 * z ** 2 - 0.8759056957e136 * rho ** 10 * z ** 4 - 0.1690198047e138 * rho ** 8 * z ** 6 - 0.3482791559e138 * rho ** 6 * z ** 8 - 0.3051997708e138 * rho ** 4 * z ** 10 - 0.1230281236e138 * rho ** 2 * z ** 12 - 0.1087909584e137 * rho ** 12 * z + 0.1311838916e138 * rho ** 10 * z ** 3 + 0.4836320674e138 * rho ** 8 * z ** 5 + 0.5011146892e138 * rho ** 6 * z ** 7 + 0.6703678466e137 * rho ** 4 * z ** 9 - 0.1555431470e138 * rho ** 2 * z ** 11 - 0.2609761050e138 * rho ** 10 * z ** 2 - 0.2003152672e138 * rho ** 8 * z ** 4 + 0.1245262048e139 * rho ** 6 * z ** 6 + 0.2366733296e139 * rho ** 4 * z ** 8 + 0.1519448288e139 * rho ** 2 * z ** 10 + 0.2366989375e138 * rho ** 10 * z - 0.1464586892e139 * rho ** 8 * z ** 3 + 0.4849208909e85 * rho ** 30 * z - 0.1372423132e85 * rho ** 28 * z ** 3 + 0.2146266615e87 * rho ** 26 * z ** 5 + 0.5198021012e88 * rho ** 24 * z ** 7 + 0.3851690916e89 * rho ** 22 * z ** 9 + 0.1579358093e90 * rho ** 20 * z ** 11 + 0.4240167671e90 * rho ** 18 * z ** 13 + 0.8028596556e90 * rho ** 16 * z ** 15 + 0.1112609196e91 * rho ** 14 * z ** 17 + 0.1147614147e91 * rho ** 12 * z ** 19 + 0.8832300927e90 * rho ** 10 * z ** 21 + 0.5016875889e90 * rho ** 8 * z ** 23 + 0.2046253253e90 * rho ** 6 * z ** 25 + 0.5678968146e89 * rho ** 4 * z ** 27 + 0.9616373436e88 * rho ** 2 * z ** 29 + 0.1630392547e92 * rho ** 28 * z ** 2 - 0.8488605232e93 * rho ** 26 * z ** 4 - 0.1780984587e94 * rho ** 24 * z ** 6 + 0.5079036571e95 * rho ** 22 * z ** 8 + 0.4171440805e96 * rho ** 20 * z ** 10 + 0.1625730776e97 * rho ** 18 * z ** 12 + 0.3980645658e97 * rho ** 16 * z ** 14 + 0.6717387472e97 * rho ** 14 * z ** 16 + 0.8129934579e97 * rho ** 12 * z ** 18 + 0.7158293682e97 * rho ** 10 * z ** 20 + 0.4566788360e97 * rho ** 8 * z ** 22 + 0.2062889871e97 * rho ** 6 * z ** 24 + 0.6270606894e96 * rho ** 4 * z ** 26 + 0.1152586580e96 * rho ** 2 * z ** 28 - 0.4733681724e94 * rho ** 28 * z - 0.6382088695e97 * rho ** 26 * z ** 3 + 0.2078275316e99 * rho ** 24 * z ** 5 - 0.1211594119e101 * rho ** 22 * z ** 7 - 0.1488606117e102 * rho ** 20 * z ** 9 - 0.7719534602e102 * rho ** 18 * z ** 11 - 0.2359058071e103 * rho ** 16 * z ** 13 - 0.4771617990e103 * rho ** 14 * z ** 15 - 0.6731597062e103 * rho ** 12 * z ** 17 - 0.6769226209e103 * rho ** 10 * z ** 19 - 0.4855841003e103 * rho ** 8 * z ** 21 - 0.2436172330e103 * rho ** 6 * z ** 23 - 0.8143167243e102 * rho ** 4 * z ** 25 - 0.1632432294e102 * rho ** 2 * z ** 27 + 0.1249374133e101 * rho ** 26 * z ** 2 - 0.1017132707e105 * rho ** 24 * z ** 4 + 0.2875174808e106 * rho ** 22 * z ** 6 + 0.4534873990e107 * rho ** 20 * z ** 8 + 0.2729929667e108 * rho ** 18 * z ** 10 + 0.9410113917e108 * rho ** 16 * z ** 12 + 0.2112807088e109 * rho ** 14 * z ** 14 + 0.3271839733e109 * rho ** 12 * z ** 16 + 0.3580592382e109 * rho ** 10 * z ** 18 + 0.2775859698e109 * rho ** 8 * z ** 20 + 0.1496354726e109 * rho ** 6 * z ** 22 + 0.5347658729e108 * rho ** 4 * z ** 24 + 0.1141274173e108 * rho ** 2 * z ** 26 + 0.7625550294e103 * rho ** 26 * z + 0.1077869392e108 * rho ** 24 * z ** 3 + 0.3033330289e110 * rho ** 22 * z ** 5 - 0.5426479564e112 * rho ** 20 * z ** 7 - 0.5668437453e113 * rho ** 18 * z ** 9 - 0.2610429818e114 * rho ** 16 * z ** 11 - 0.7088086048e114 * rho ** 14 * z ** 13 - 0.1260469092e115 * rho ** 12 * z ** 15 - 0.1535411119e115 * rho ** 10 * z ** 17 - 0.1298025498e115 * rho ** 8 * z ** 19 - 0.7521498279e114 * rho ** 6 * z ** 21 - 0.2859331989e114 * rho ** 4 * z ** 23 - 0.6439928222e113 * rho ** 2 * z ** 25 + 0.5210685007e110 * rho ** 24 * z ** 2 + 0.1039945092e114 * rho ** 22 * z ** 4 + 0.3898602495e117 * rho ** 20 * z ** 6 + 0.6448681471e118 * rho ** 18 * z ** 8 + 0.4084647333e119 * rho ** 16 * z ** 10 + 0.1413793610e120 * rho ** 14 * z ** 12 + 0.3058208669e120 * rho ** 12 * z ** 14 + 0.4390240408e120 * rho ** 10 * z ** 16 + 0.4275292067e120 * rho ** 8 * z ** 18 + 0.2804954679e120 * rho ** 6 * z ** 20 + 0.1191184335e120 * rho ** 4 * z ** 22 + 0.2964787297e119 * rho ** 2 * z ** 24 - 0.5555515667e112 * rho ** 24 * z + 0.1310077737e117 * rho ** 22 * z ** 3 + 0.1548486622e120 * rho ** 20 * z ** 5 - 0.5457153213e123 * rho ** 18 * z ** 7 - 0.5063687620e124 * rho ** 16 * z ** 9 - 0.2085966392e125 * rho ** 14 * z ** 11 - 0.5010757568e125 * rho ** 12 * z ** 13 - 0.7735993708e125 * rho ** 10 * z ** 15 - 0.7960875939e125 * rho ** 8 * z ** 17 - 0.5460680274e125 * rho ** 6 * z ** 19 - 0.2407598894e125 * rho ** 4 * z ** 21 - 0.6191244504e124 * rho ** 2 * z ** 23 - 0.2643753528e119 * rho ** 22 * z ** 2 + 0.2383101325e123 * rho ** 20 * z ** 4 - 0.3653043627e126 * rho ** 18 * z ** 6 + 0.2295016875e129 * rho ** 16 * z ** 8 + 0.1910479712e130 * rho ** 14 * z ** 10 + 0.6922583287e130 * rho ** 12 * z ** 12 + 0.1431386579e131 * rho ** 10 * z ** 14 + 0.1848617685e131 * rho ** 8 * z ** 16 + 0.7139451772e41 * rho ** 4 * z ** 34 + 0.7931047121e40 * rho ** 2 * z ** 36 + 0.4457561297e46 * rho ** 36 * z + 0.8023315819e47 * rho ** 34 * z ** 3 + 0.6819567836e48 * rho ** 32 * z ** 5 + 0.3636969042e49 * rho ** 30 * z ** 7 + 0.1363813160e50 * rho ** 28 * z ** 9 + 0.3818536048e50 * rho ** 26 * z ** 11 + 0.8273189377e50 * rho ** 24 * z ** 13 + 0.1418208626e51 * rho ** 22 * z ** 15 + 0.1949964719e51 * rho ** 20 * z ** 17 + 0.2166547222e51 * rho ** 18 * z ** 19 + 0.1949820203e51 * rho ** 16 * z ** 21 + 0.1417998420e51 * rho ** 14 * z ** 23 + 0.8271350075e50 * rho ** 12 * z ** 25 + 0.3817404170e50 * rho ** 10 * z ** 27 + 0.1363307857e50 * rho ** 8 * z ** 29 + 0.3635352073e49 * rho ** 6 * z ** 31 + 0.6816030717e48 * rho ** 4 * z ** 33 + 0.8018560029e47 * rho ** 2 * z ** 35 + 0.2298144257e57 * rho ** 34 * z ** 2 + 0.1952997465e58 * rho ** 32 * z ** 4 + 0.1041371953e59 * rho ** 30 * z ** 6 + 0.3904294913e59 * rho ** 28 * z ** 8 + 0.1092964657e60 * rho ** 26 * z ** 10 + 0.2367574720e60 * rho ** 24 * z ** 12 + 0.4057816235e60 * rho ** 22 * z ** 14 + 0.5578283091e60 * rho ** 20 * z ** 16 + 0.6196743491e60 * rho ** 18 * z ** 18 + 0.5575855478e60 * rho ** 16 * z ** 20 + 0.4054285162e60 * rho ** 14 * z ** 22 + 0.2364485030e60 * rho ** 12 * z ** 24 + 0.1091063309e60 * rho ** 10 * z ** 26 + 0.3895806754e59 * rho ** 8 * z ** 28 + 0.1038655741e59 * rho ** 6 * z ** 30 + 0.1947055752e58 * rho ** 4 * z ** 32 + 0.2290155397e57 * rho ** 2 * z ** 34 + 0.1358525994e63 * rho ** 34 * z + 0.2309294659e64 * rho ** 32 * z ** 3 + 0.1847275994e65 * rho ** 30 * z ** 5 + 0.9235580754e65 * rho ** 28 * z ** 7 + 0.3232173347e66 * rho ** 26 * z ** 9 + 0.8402922423e66 * rho ** 24 * z ** 11 + 0.1680438729e67 * rho ** 22 * z ** 13 + 0.2640460231e67 * rho ** 20 * z ** 15 + 0.3300288593e67 * rho ** 18 * z ** 17 + 0.3300001701e67 * rho ** 16 * z ** 19 + 0.2639771691e67 * rho ** 14 * z ** 21 + 0.1679708459e67 * rho ** 12 * z ** 23 + 0.8397810534e66 * rho ** 10 * z ** 25 + 0.3229645490e66 * rho ** 8 * z ** 27 + 0.9226753312e65 * rho ** 6 * z ** 29 + 0.1845189507e65 * rho ** 4 * z ** 31 + 0.2306285303e64 * rho ** 2 * z ** 33 + 0.5315855909e69 * rho ** 32 * z ** 2 + 0.7845649695e70 * rho ** 30 * z ** 4 + 0.5718886252e71 * rho ** 28 * z ** 6 + 0.2630084175e72 * rho ** 26 * z ** 8 + 0.8471867376e72 * rho ** 24 * z ** 10 + 0.2021026345e73 * rho ** 22 * z ** 12 + 0.3689089349e73 * rho ** 20 * z ** 14 + 0.5252699011e73 * rho ** 18 * z ** 16 + 0.5893885021e73 * rho ** 16 * z ** 18 + 0.5227935669e73 * rho ** 14 * z ** 20 + 0.3653135857e73 * rho ** 12 * z ** 22 + 0.1989663166e73 * rho ** 10 * z ** 24 + 0.8279691362e72 * rho ** 8 * z ** 26 + 0.2544766661e72 * rho ** 6 * z ** 28 + 0.5447729351e71 * rho ** 4 * z ** 30 + 0.7257300277e70 * rho ** 2 * z ** 32 + 0.5146622255e74 * rho ** 32 * z + 0.6239329752e75 * rho ** 30 * z ** 3 + 0.3166198050e76 * rho ** 28 * z ** 5 + 0.7634851952e76 * rho ** 26 * z ** 7 + 0.1350031526e76 * rho ** 24 * z ** 9 - 0.5368603473e77 * rho ** 22 * z ** 11 - 0.2039158383e78 * rho ** 20 * z ** 13 - 0.4436211417e78 * rho ** 18 * z ** 15 - 0.6722387570e78 * rho ** 16 * z ** 17 - 0.7530824773e78 * rho ** 14 * z ** 19 - 0.6371629350e78 * rho ** 12 * z ** 21 - 0.4081626049e78 * rho ** 10 * z ** 23 - 0.1955826975e78 * rho ** 8 * z ** 25 - 0.6810914883e77 * rho ** 6 * z ** 27 - 0.1631103295e77 * rho ** 4 * z ** 29 - 0.2405895690e76 * rho ** 2 * z ** 31 + 0.1781768419e81 * rho ** 30 * z ** 2 - 0.2146769091e81 * rho ** 28 * z ** 4 - 0.2146885841e83 * rho ** 26 * z ** 6 - 0.1793233182e84 * rho ** 24 * z ** 8 - 0.7966601773e84 * rho ** 22 * z ** 10 - 0.2321731003e85 * rho ** 20 * z ** 12 - 0.4818210232e85 * rho ** 18 * z ** 14 - 0.7414961850e85 * rho ** 16 * z ** 16 - 0.8635589873e85 * rho ** 14 * z ** 18 - 0.7666384426e85 * rho ** 12 * z ** 20 - 0.5169997420e85 * rho ** 10 * z ** 22 - 0.2609296554e85 * rho ** 8 * z ** 24 - 0.9562427894e84 * rho ** 6 * z ** 26 - 0.2406381801e84 * rho ** 4 * z ** 28 - 0.3723078989e83 * rho ** 2 * z ** 30 + 0.6873029071e23 * rho ** 38 * z ** 2 + 0.6528136152e24 * rho ** 36 * z ** 4 + 0.3916136869e25 * rho ** 34 * z ** 6 + 0.1664041644e26 * rho ** 32 * z ** 8 + 0.5323920460e26 * rho ** 30 * z ** 10 + 0.1330726934e27 * rho ** 28 * z ** 12 + 0.2660947544e27 * rho ** 26 * z ** 14 + 0.4323217047e27 * rho ** 24 * z ** 16 + 0.5763192531e27 * rho ** 22 * z ** 18 + 0.6338305326e27 * rho ** 20 * z ** 20 + 0.5760999055e27 * rho ** 18 * z ** 22 + 0.4319926833e27 * rho ** 16 * z ** 24 + 0.2657910423e27 * rho ** 14 * z ** 26 + 0.1328702187e27 * rho ** 12 * z ** 28 + 0.5313796725e26 * rho ** 10 * z ** 30 + 0.1660245244e26 * rho ** 8 * z ** 32 + 0.3905715379e25 * rho ** 6 * z ** 34 + 0.6508285697e24 * rho ** 4 * z ** 36 + 0.6849521955e23 * rho ** 2 * z ** 38 + 0.3656532208e29 * rho ** 38 * z + 0.6947356036e30 * rho ** 36 * z ** 3 + 0.6252570591e31 * rho ** 34 * z ** 5 + 0.3543094980e32 * rho ** 32 * z ** 7 + 0.1417226605e33 * rho ** 30 * z ** 9 + 0.4251645519e33 * rho ** 28 * z ** 11 + 0.9920425876e33 * rho ** 26 * z ** 13 + 0.1842349828e34 * rho ** 24 * z ** 15 + 0.2763502188e34 * rho ** 22 * z ** 17 + 0.3377586112e34 * rho ** 20 * z ** 19 + 0.3377558333e34 * rho ** 18 * z ** 21 + 0.2763434002e34 * rho ** 16 * z ** 23 + 0.1842274066e34 * rho ** 14 * z ** 25 + 0.9919854747e33 * rho ** 12 * z ** 27 + 0.4251330816e33 * rho ** 10 * z ** 29 + 0.1417098392e33 * rho ** 8 * z ** 31 + 0.3542716170e32 * rho ** 6 * z ** 33 + 0.6251799259e31 * rho ** 4 * z ** 35 + 0.6946384730e30 * rho ** 2 * z ** 37 + 0.7959587817e40 * rho ** 36 * z ** 2 + 0.7162116444e41 * rho ** 34 * z ** 4 + 0.4057675631e42 * rho ** 32 * z ** 6 + 0.1622727490e43 * rho ** 30 * z ** 8 + 0.4867154318e43 * rho ** 28 * z ** 10 + 0.1135429471e44 * rho ** 26 * z ** 12 + 0.2108209319e44 * rho ** 24 * z ** 14 + 0.3161645947e44 * rho ** 22 * z ** 16 + 0.3863417562e44 * rho ** 20 * z ** 18 + 0.3862601298e44 * rho ** 18 * z ** 20 + 0.3159642390e44 * rho ** 16 * z ** 22 + 0.2105983144e44 * rho ** 14 * z ** 24 + 0.1133751278e44 * rho ** 12 * z ** 26 + 0.4857907131e43 * rho ** 10 * z ** 28 + 0.1618960117e43 * rho ** 8 * z ** 30 + 0.4046544758e42 * rho ** 6 * z ** 32 + 0.4190141420e39 * rho ** 38 + 0.3437167989e22 * rho ** 40 + 0.4584407713e78 * rho ** 32 + 0.4844693599e67 * rho ** 34 + 0.1277024752e56 * rho ** 36 + 0.9558971127e114 * rho ** 24 - 0.2866916121e105 * rho ** 26 + 0.1346873372e97 * rho ** 28 - 0.1920324460e87 * rho ** 30 - 0.2281550139e134 * z ** 16 + 0.7845380470e136 * z ** 15 - 0.1830063332e137 * z ** 14 - 0.6304937425e137 * z ** 13 + 0.3335197551e138 * z ** 12 - 0.1223429623e137 * z ** 11 - 0.2775433421e139 * z ** 10 + 0.4691583507e139 * z ** 9 + 0.9789306353e139 * z ** 8 - 0.3937015285e140 * z ** 7 + 0.1278726586e140 * z ** 6 + 0.1284865174e141 * z ** 5 - 0.2087953906e141 * z ** 4 - 0.4499284272e140 * z ** 3 + 0.3424108481e22 * z ** 40 + 0.3655960852e29 * z ** 39 + 0.4173352776e39 * z ** 38 + 0.4454588928e46 * z ** 37 + 0.1272031714e56 * z ** 36 + 0.1356519756e63 * z ** 35 + 0.4532254310e69 * z ** 34 - 0.1649531747e75 * z ** 33 - 0.2672414599e82 * z ** 32 + 0.7506090557e87 * z ** 31 + 0.9693277639e94 * z ** 30 - 0.1486989203e101 * z ** 29 + 0.1102604529e107 * z ** 28 - 0.6525732646e112 * z ** 27 + 0.3290687471e118 * z ** 26 - 0.7075066497e123 * z ** 25 + 0.2999884404e129 * z ** 24 - 0.6859394406e130 * z ** 23 + 0.4575666573e131 * z ** 22 + 0.1318029098e132 * z ** 21 - 0.3077027250e133 * z ** 20 + 0.9061013925e133 * z ** 19 + 0.6078491848e134 * z ** 18 - 0.4334437790e135 * z ** 17 - 0.1971246699e129 * rho ** 18 + 0.2206921656e125 * rho ** 20 - 0.2789779589e120 * rho ** 22 + 0.3969493541e136 * rho ** 12 - 0.1025729215e135 * rho ** 14 + 0.1145437480e133 * rho ** 16 + 0.4960163363e140 * rho ** 4 - 0.9664599447e139 * rho ** 6 + 0.1152752586e139 * rho ** 8 - 0.8633353068e137 * rho ** 10

def get_critv_hyperbola():
    return lambda rho, z: rho ** 16 + 8 * z ** 2 * rho ** 14 + 28 * z ** 4 * rho ** 12 + 56 * z ** 6 * rho ** 10 + 70 * z ** 8 * rho ** 8 + 56 * z ** 10 * rho ** 6 + 28 * z ** 12 * rho ** 4 + 8 * z ** 14 * rho ** 2 + z ** 16 - 120 * rho ** 14 - 848 * z ** 2 * rho ** 12 - 2568 * z ** 4 * rho ** 10 - 4320 * z ** 6 * rho ** 8 - 4360 * z ** 8 * rho ** 6 - 2640 * z ** 10 * rho ** 4 - 888 * z ** 12 * rho ** 2 - 128 * z ** 14 + 5764 * rho ** 12 + 35240 * z ** 2 * rho ** 10 + 89948 * z ** 4 * rho ** 8 + 122672 * z ** 6 * rho ** 6 + 94268 * z ** 8 * rho ** 4 + 38696 * z ** 10 * rho ** 2 + 6628 * z ** 12 - 146200 * rho ** 10 - 744720 * z ** 2 * rho ** 8 - 1536272 * z ** 4 * rho ** 6 - 1600192 * z ** 6 * rho ** 4 - 839448 * z ** 8 * rho ** 2 - 177008 * z ** 10 + 2125678 * rho ** 8 + 8617240 * z ** 2 * rho ** 6 + 13537172 * z ** 4 * rho ** 4 + 9629592 * z ** 6 * rho ** 2 + 2589102 * z ** 8 - 17930600 * rho ** 6 - 55233392 * z ** 2 * rho ** 4 - 59241064 * z ** 4 * rho ** 2 - 20750176 * z ** 6 + 87494548 * rho ** 4 + 184682296 * z ** 2 * rho ** 2 + 91063924 * z ** 4 - 230010120 * rho ** 2 - 205712944 * z ** 2 + 187210873
def get_ps():
    return lambda t2, t3: 3136304 - 314928 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 7 * math.sin(t2) ** 4 - 2303640 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 6 * math.sin(t2) ** 4 + 819396 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 7 * math.sin(t2) ** 2 - 6837048 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 5 * math.sin(t2) ** 4 + 6706800 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 6 * math.sin(t2) ** 2 - 10277280 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 4 * math.sin(t2) ** 4 + 21109896 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 5 * math.sin(t2) ** 2 - 7637760 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 3 * math.sin(t2) ** 4 + 31215024 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 4 * math.sin(t2) ** 2 - 1649664 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 2 * math.sin(t2) ** 4 + 18427176 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 3 * math.sin(t2) ** 2 + 1075200 * math.cos(t2) * math.sin(t3) * math.cos(t3) * math.sin(t2) ** 4 - 4309344 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 2 * math.sin(t2) ** 2 - 10046592 * math.cos(t2) * math.sin(t3) * math.cos(t3) * math.sin(t2) ** 2 + 3161536 * math.cos(t2) + 11699400 * math.cos(t3) + 3075072 * math.sin(t3) - 3297792 * math.cos(t2) * math.sin(t3) * math.sin(t2) ** 2 - 4777920 * math.cos(t2) * math.cos(t3) ** 5 * math.sin(t2) ** 4 + 64152 * math.cos(t2) * math.cos(t3) ** 6 * math.sin(t2) ** 2 - 2376000 * math.cos(t2) * math.cos(t3) ** 4 * math.sin(t2) ** 4 + 9229680 * math.cos(t2) * math.cos(t3) ** 5 * math.sin(t2) ** 2 + 3981312 * math.cos(t2) * math.cos(t3) ** 3 * math.sin(t2) ** 4 + 14190552 * math.cos(t2) * math.cos(t3) ** 4 * math.sin(t2) ** 2 + 7255040 * math.cos(t2) * math.cos(t3) ** 2 * math.sin(t2) ** 4 + 76320 * math.cos(t2) * math.cos(t3) ** 3 * math.sin(t2) ** 2 + 4571136 * math.cos(t2) * math.cos(t3) * math.sin(t2) ** 4 - 16523392 * math.cos(t2) * math.cos(t3) ** 2 * math.sin(t2) ** 2 - 14043648 * math.cos(t2) * math.cos(t3) * math.sin(t2) ** 2 - 816480 * math.cos(t2) * math.cos(t3) ** 7 * math.sin(t2) ** 4 - 8456640 * math.sin(t3) * math.cos(t3) ** 2 * math.sin(t2) ** 2 - 15288512 * math.sin(t3) * math.cos(t3) * math.sin(t2) ** 2 + 72900 * math.sin(t3) * math.cos(t3) ** 7 * math.sin(t2) ** 6 - 656100 * math.sin(t3) * math.cos(t3) ** 7 * math.sin(t2) ** 4 + 1944000 * math.sin(t3) * math.cos(t3) ** 5 * math.sin(t2) ** 6 - 4996080 * math.sin(t3) * math.cos(t3) ** 6 * math.sin(t2) ** 4 + 583200 * math.sin(t3) * math.cos(t3) ** 6 * math.sin(t2) ** 6 - 489888 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 7 - 4774464 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 6 - 16140708 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 5 - 23681808 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 4 - 11221416 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 3 + 8147592 * math.cos(t2) * math.sin(t3) * math.cos(t3) ** 2 + 10649152 * math.cos(t2) * math.cos(t3) * math.sin(t3) + 3456000 * math.sin(t3) * math.cos(t3) ** 4 * math.sin(t2) ** 6 + 1067256 * math.sin(t3) * math.cos(t3) ** 7 * math.sin(t2) ** 2 - 15229944 * math.sin(t3) * math.cos(t3) ** 5 * math.sin(t2) ** 4 + 3456000 * math.sin(t3) * math.cos(t3) ** 3 * math.sin(t2) ** 6 + 9090144 * math.sin(t3) * math.cos(t3) ** 6 * math.sin(t2) ** 2 - 22959072 * math.sin(t3) * math.cos(t3) ** 4 * math.sin(t2) ** 4 + 1843200 * math.sin(t3) * math.cos(t3) ** 2 * math.sin(t2) ** 6 + 29124360 * math.sin(t3) * math.cos(t3) ** 5 * math.sin(t2) ** 2 - 15969024 * math.sin(t3) * math.cos(t3) ** 3 * math.sin(t2) ** 4 + 409600 * math.sin(t3) * math.cos(t3) * math.sin(t2) ** 6 + 42892848 * math.sin(t3) * math.cos(t3) ** 4 * math.sin(t2) ** 2 - 1195008 * math.sin(t3) * math.cos(t3) ** 2 * math.sin(t2) ** 4 + 23821380 * math.sin(t3) * math.cos(t3) ** 3 * math.sin(t2) ** 2 + 4450304 * math.sin(t3) * math.cos(t3) * math.sin(t2) ** 4 + 516096 * math.cos(t2) * math.sin(t3) * math.sin(t2) ** 4 - 90396 * math.cos(t2) * math.cos(t3) ** 8 * math.sin(t2) ** 4 - 402408 * math.cos(t2) * math.cos(t3) ** 8 * math.sin(t2) ** 2 - 2895588 * math.cos(t2) * math.cos(t3) ** 6 * math.sin(t2) ** 4 - 1632960 * math.cos(t2) * math.cos(t3) ** 7 * math.sin(t2) ** 2 + 1064960 * math.cos(t2) * math.sin(t2) ** 4 - 3698688 * math.cos(t2) * math.sin(t2) ** 2 + 11383259 * math.cos(t3) ** 2 + 769824 * math.cos(t2) * math.cos(t3) ** 8 + 3872448 * math.cos(t2) * math.cos(t3) ** 7 + 4811400 * math.cos(t2) * math.cos(t3) ** 6 - 5625504 * math.cos(t2) * math.cos(t3) ** 5 - 16626348 * math.cos(t2) * math.cos(t3) ** 4 - 6532464 * math.cos(t2) * math.cos(t3) ** 3 + 11295356 * math.cos(t2) * math.cos(t3) ** 2 + 11698080 * math.cos(t2) * math.cos(t3) + 1385100 * math.cos(t3) ** 6 * math.sin(t2) ** 6 + 2008800 * math.cos(t3) ** 5 * math.sin(t2) ** 6 + 648000 * math.cos(t3) ** 4 * math.sin(t2) ** 6 - 2073600 * math.cos(t3) ** 3 * math.sin(t2) ** 6 - 7403904 * math.cos(t3) ** 4 * math.sin(t2) ** 4 - 3148800 * math.cos(t3) ** 2 * math.sin(t2) ** 6 + 5117952 * math.cos(t3) ** 3 * math.sin(t2) ** 4 - 1843200 * math.cos(t3) * math.sin(t2) ** 6 + 14527744 * math.cos(t3) ** 2 * math.sin(t2) ** 4 + 10389504 * math.cos(t3) * math.sin(t2) ** 4 - 22310764 * math.cos(t3) ** 2 * math.sin(t2) ** 2 + 54675 * math.cos(t3) ** 8 * math.sin(t2) ** 6 + 437400 * math.cos(t3) ** 7 * math.sin(t2) ** 6 + 18225 * math.cos(t3) ** 8 * math.sin(t2) ** 4 - 515160 * math.cos(t3) ** 7 * math.sin(t2) ** 4 - 793152 * math.cos(t3) ** 8 * math.sin(t2) ** 2 - 3714903 * math.cos(t3) ** 6 * math.sin(t2) ** 4 - 3580848 * math.cos(t3) ** 7 * math.sin(t2) ** 2 - 8968104 * math.cos(t3) ** 5 * math.sin(t2) ** 4 - 19863456 * math.cos(t3) * math.sin(t2) ** 2 + 22673745 * math.cos(t3) ** 4 * math.sin(t2) ** 2 + 3219528 * math.cos(t3) ** 3 * math.sin(t2) ** 2 - 2268486 * math.cos(t3) ** 6 * math.sin(t2) ** 2 + 12284352 * math.cos(t3) ** 5 * math.sin(t2) ** 2 + 3100800 * math.cos(t2) * math.sin(t3) + 1744896 * math.sin(t3) * math.sin(t2) ** 4 - 4796928 * math.sin(t3) * math.sin(t2) ** 2 - 489888 * math.sin(t3) * math.cos(t3) ** 7 - 4774464 * math.sin(t3) * math.cos(t3) ** 6 - 16165656 * math.sin(t3) * math.cos(t3) ** 5 - 23730624 * math.sin(t3) * math.cos(t3) ** 4 - 11196468 * math.sin(t3) * math.cos(t3) ** 3 + 8223456 * math.sin(t3) * math.cos(t3) ** 2 + 10649792 * math.sin(t3) * math.cos(t3) - 5241280 * math.sin(t2) ** 2 - 409600 * math.sin(t2) ** 6 + 2596864 * math.sin(t2) ** 4 + 3872448 * math.cos(t3) ** 7 + 4817232 * math.cos(t3) ** 6 + 766908 * math.cos(t3) ** 8 - 6510696 * math.cos(t3) ** 3 - 16717167 * math.cos(t3) ** 4 - 5674320 * math.cos(t3) ** 5
def get_conic(k_R, k_z, d_list=None, a_list=None, alpha_list=None, robot_type=None, _sym=False):
    if d_list is None and robot_type is None:
        robot_type = "philippe"

    if robot_type is not None:
        d_list, a_list, alpha_list = get_dh_parameters(robot=robot_type)

    d1, d2, d3 = d_list
    a1, a2, a3 = a_list
    alpha1, alpha2, alpha3 = alpha_list
    ca1 = np.cos(alpha1)
    sa1 = np.sin(alpha1)
    ca2 = np.cos(alpha2)
    sa2 = np.sin(alpha2)
    ca3 = np.cos(alpha3)
    sa3 = np.sin(alpha3)

    if _sym:
        c3, s3 = var('c3, s3')
        return 2 / a1 ** 2 * a2 * a3 ** 2 * c3 * d2 * s3 * sa2 + 2 / a1 ** 2 * a3 * ca2 * d2 ** 2 * d3 * s3 * sa2 + 2 / a1 ** 2 * a2 * a3 * c3 * ca2 * d2 * d3 - k_R / 2 + 1 / a1 ** 2 * a2 ** 2 * a3 * d2 * s3 * sa2 + 1 / a1 ** 2 * a3 * d2 * d3 ** 2 * s3 * sa2 - 1 / a1 ** 2 * a3 * d2 * k_R * s3 * sa2 + 2 / sa1 ** 2 * a3 * ca1 ** 2 * d2 * s3 * sa2 - 2 / sa1 ** 2 * a3 * ca1 * k_z * s3 * sa2 + 2 * a3 * ca2 * d3 * s3 * sa2 + 2 / sa1 ** 2 * a3 * ca1 ** 2 * ca2 * d3 * s3 * sa2 + 1 / a1 ** 2 * a2 ** 2 * a3 ** 2 / 2 + 1 / a1 ** 2 * a2 ** 2 * d2 ** 2 / 2 + 1 / a1 ** 2 * a2 ** 2 * d3 ** 2 / 2 + 1 / a1 ** 2 * a3 ** 2 * d2 ** 2 / 2 + 1 / a1 ** 2 * a3 ** 2 * d3 ** 2 / 2 + 1 / a1 ** 2 * d2 ** 2 * d3 ** 2 / 2 - 1 / a1 ** 2 * a2 ** 2 * k_R / 2 - 1 / a1 ** 2 * a3 ** 2 * k_R / 2 - 1 / a1 ** 2 * d2 ** 2 * k_R / 2 - 1 / a1 ** 2 * d3 ** 2 * k_R / 2 + 1 / sa1 ** 2 * ca1 ** 2 * d2 ** 2 - a3 ** 2 * ca2 ** 2 * s3 ** 2 + 1 / a1 ** 2 * a2 ** 4 / 4 + 1 / a1 ** 2 * a3 ** 4 / 4 + 1 / a1 ** 2 * d2 ** 4 / 4 + 1 / a1 ** 2 * d3 ** 4 / 4 + 1 / a1 ** 2 * k_R ** 2 / 4 + 1 / sa1 ** 2 * k_z ** 2 - d3 ** 2 * sa2 ** 2 - a3 ** 2 * c3 ** 2 + d2 ** 2 / 2 + d3 ** 2 / 2 - a2 ** 2 / 2 + a3 ** 2 / 2 + a1 ** 2 / 4 + 1 / a1 ** 2 * a2 ** 2 * a3 ** 2 * c3 ** 2 + 1 / a1 ** 2 * ca2 ** 2 * d2 ** 2 * d3 ** 2 + 1 / a1 ** 2 * a2 ** 3 * a3 * c3 + 1 / a1 ** 2 * a2 * a3 ** 3 * c3 + 1 / a1 ** 2 * ca2 * d2 ** 3 * d3 + 1 / a1 ** 2 * ca2 * d2 * d3 ** 3 + 1 / sa1 ** 2 * ca1 ** 2 * ca2 ** 2 * d3 ** 2 - 2 / sa1 ** 2 * ca1 * d2 * k_z + ca2 * d2 * d3 - a2 * a3 * c3 + 1 / a1 ** 2 * a3 ** 2 * d2 ** 2 * s3 ** 2 * sa2 ** 2 + 1 / a1 ** 2 * a3 ** 3 * d2 * s3 * sa2 + 1 / a1 ** 2 * a3 * d2 ** 3 * s3 * sa2 + 1 / a1 ** 2 * a2 ** 2 * ca2 * d2 * d3 + 1 / a1 ** 2 * a2 * a3 * c3 * d2 ** 2 + 1 / a1 ** 2 * a2 * a3 * c3 * d3 ** 2 + 1 / a1 ** 2 * a3 ** 2 * ca2 * d2 * d3 - 1 / a1 ** 2 * a2 * a3 * c3 * k_R - 1 / a1 ** 2 * ca2 * d2 * d3 * k_R + 1 / sa1 ** 2 * a3 ** 2 * ca1 ** 2 * s3 ** 2 * sa2 ** 2 + 2 / sa1 ** 2 * ca1 ** 2 * ca2 * d2 * d3 - 2 / sa1 ** 2 * ca1 * ca2 * d3 * k_z + a3 * d2 * s3 * sa2
    else:
        return lambda c3, s3: 2 / a1 ** 2 * a2 * a3 ** 2 * c3 * d2 * s3 * sa2 + 2 / a1 ** 2 * a3 * ca2 * d2 ** 2 * d3 * s3 * sa2 + 2 / a1 ** 2 * a2 * a3 * c3 * ca2 * d2 * d3 - k_R / 2 + 1 / a1 ** 2 * a2 ** 2 * a3 * d2 * s3 * sa2 + 1 / a1 ** 2 * a3 * d2 * d3 ** 2 * s3 * sa2 - 1 / a1 ** 2 * a3 * d2 * k_R * s3 * sa2 + 2 / sa1 ** 2 * a3 * ca1 ** 2 * d2 * s3 * sa2 - 2 / sa1 ** 2 * a3 * ca1 * k_z * s3 * sa2 + 2 * a3 * ca2 * d3 * s3 * sa2 + 2 / sa1 ** 2 * a3 * ca1 ** 2 * ca2 * d3 * s3 * sa2 + 1 / a1 ** 2 * a2 ** 2 * a3 ** 2 / 2 + 1 / a1 ** 2 * a2 ** 2 * d2 ** 2 / 2 + 1 / a1 ** 2 * a2 ** 2 * d3 ** 2 / 2 + 1 / a1 ** 2 * a3 ** 2 * d2 ** 2 / 2 + 1 / a1 ** 2 * a3 ** 2 * d3 ** 2 / 2 + 1 / a1 ** 2 * d2 ** 2 * d3 ** 2 / 2 - 1 / a1 ** 2 * a2 ** 2 * k_R / 2 - 1 / a1 ** 2 * a3 ** 2 * k_R / 2 - 1 / a1 ** 2 * d2 ** 2 * k_R / 2 - 1 / a1 ** 2 * d3 ** 2 * k_R / 2 + 1 / sa1 ** 2 * ca1 ** 2 * d2 ** 2 - a3 ** 2 * ca2 ** 2 * s3 ** 2 + 1 / a1 ** 2 * a2 ** 4 / 4 + 1 / a1 ** 2 * a3 ** 4 / 4 + 1 / a1 ** 2 * d2 ** 4 / 4 + 1 / a1 ** 2 * d3 ** 4 / 4 + 1 / a1 ** 2 * k_R ** 2 / 4 + 1 / sa1 ** 2 * k_z ** 2 - d3 ** 2 * sa2 ** 2 - a3 ** 2 * c3 ** 2 + d2 ** 2 / 2 + d3 ** 2 / 2 - a2 ** 2 / 2 + a3 ** 2 / 2 + a1 ** 2 / 4 + 1 / a1 ** 2 * a2 ** 2 * a3 ** 2 * c3 ** 2 + 1 / a1 ** 2 * ca2 ** 2 * d2 ** 2 * d3 ** 2 + 1 / a1 ** 2 * a2 ** 3 * a3 * c3 + 1 / a1 ** 2 * a2 * a3 ** 3 * c3 + 1 / a1 ** 2 * ca2 * d2 ** 3 * d3 + 1 / a1 ** 2 * ca2 * d2 * d3 ** 3 + 1 / sa1 ** 2 * ca1 ** 2 * ca2 ** 2 * d3 ** 2 - 2 / sa1 ** 2 * ca1 * d2 * k_z + ca2 * d2 * d3 - a2 * a3 * c3 + 1 / a1 ** 2 * a3 ** 2 * d2 ** 2 * s3 ** 2 * sa2 ** 2 + 1 / a1 ** 2 * a3 ** 3 * d2 * s3 * sa2 + 1 / a1 ** 2 * a3 * d2 ** 3 * s3 * sa2 + 1 / a1 ** 2 * a2 ** 2 * ca2 * d2 * d3 + 1 / a1 ** 2 * a2 * a3 * c3 * d2 ** 2 + 1 / a1 ** 2 * a2 * a3 * c3 * d3 ** 2 + 1 / a1 ** 2 * a3 ** 2 * ca2 * d2 * d3 - 1 / a1 ** 2 * a2 * a3 * c3 * k_R - 1 / a1 ** 2 * ca2 * d2 * d3 * k_R + 1 / sa1 ** 2 * a3 ** 2 * ca1 ** 2 * s3 ** 2 * sa2 ** 2 + 2 / sa1 ** 2 * ca1 ** 2 * ca2 * d2 * d3 - 2 / sa1 ** 2 * ca1 * ca2 * d3 * k_z + a3 * d2 * s3 * sa2


def get_fkin(theta_list, d_list=None, a_list=None, alpha_list=None, robot_type=None):
    if d_list is None and robot_type is None:
        robot_type = "philippe"

    if robot_type is not None:
        d_list, a_list, alpha_list = get_dh_parameters(robot=robot_type)

    if len(theta_list) == 2:
        theta_list = [1, theta_list[0], theta_list[1]]

    M1 = np.eye(4, 4)
    for index_i in range(len(d_list)):
        # print(index_i)
        M1 = np.matmul(np.matmul(M1, z_rotation_matrix(theta_list[index_i])), z_translation_matrix(d_list[index_i]))
        M1 = np.matmul(np.matmul(M1, x_rotation_matrix(alpha_list[index_i])), x_translation_matrix(a_list[index_i]))

    return M1[0:3, 3]


def get_det(theta_list=None, d_list=None, a_list=None, alpha_list=None, robot_type=None, _val=False, _sym=False):
    if d_list is None and robot_type is None:
        robot_type = "philippe"

    if robot_type is not None:
        d_list, a_list, alpha_list = get_dh_parameters(robot=robot_type)

    d1, d2, d3 = d_list
    a1, a2, a3 = a_list
    alpha1, alpha2, alpha3 = alpha_list

    if _val:
        if len(theta_list) == 3:
            theta_list = theta_list[1:3]

        t2, t3 = theta_list[0], theta_list[1]
        return a3 * (((math.cos(t2) * math.sin(alpha2) * d2 - math.sin(t2) * a2 * math.cos(alpha2)) * math.sin(alpha1) + a1 * math.sin(t2) * math.cos(alpha1) * math.sin(alpha2)) * a3 * math.cos(t3) ** 2 + (((a1 * math.sin(t3) * a3 - d2 * d3 * math.sin(t2)) * math.cos(alpha2) ** 2 - math.sin(alpha2) * (math.sin(t2) * math.sin(t3) * a3 * d2 + a1 * d3) * math.cos(alpha2) + math.cos(t2) * a2 * d2 * math.sin(alpha2) + d2 * d3 * math.sin(t2) - math.sin(t3) * a3 * (math.cos(t2) * a2 + a1)) * math.sin(alpha1) + a1 * math.cos(alpha1) * (math.cos(t2) * math.sin(t3) * math.cos(alpha2) * math.sin(alpha2) * a3 + math.cos(t2) * d3 * math.cos(alpha2) ** 2 + math.sin(t2) * math.sin(alpha2) * a2 - math.cos(t2) * d3)) * math.cos(t3) - (-math.sin(t2) * math.cos(alpha2) * a3 + math.sin(t3) * (math.sin(t2) * math.sin(alpha2) * d3 + math.cos(t2) * a2 + a1)) * a2 * math.sin(alpha1))
    elif _sym:
        t2, t3 = var('t2, t3')
        return a3 * (((sp.cos(t2) * sp.sin(alpha2) * d2 - sp.sin(t2) * a2 * sp.cos(alpha2)) * sp.sin(alpha1) + a1 * sp.sin(t2) * sp.cos(alpha1) * sp.sin(alpha2)) * a3 * sp.cos(t3) ** 2 + (((a1 * sp.sin(t3) * a3 - d2 * d3 * sp.sin(t2)) * sp.cos(alpha2) ** 2 - sp.sin(alpha2) * (sp.sin(t2) * sp.sin(t3) * a3 * d2 + a1 * d3) * sp.cos(alpha2) + sp.cos(t2) * a2 * d2 * sp.sin(alpha2) + d2 * d3 * sp.sin(t2) - sp.sin(t3) * a3 * (sp.cos(t2) * a2 + a1)) * sp.sin(alpha1) + a1 * sp.cos(alpha1) * (sp.cos(t2) * sp.sin(t3) * sp.cos(alpha2) * sp.sin(alpha2) * a3 + sp.cos(t2) * d3 * sp.cos(alpha2) ** 2 + sp.sin(t2) * sp.sin(alpha2) * a2 - sp.cos(t2) * d3)) * sp.cos(t3) - (-sp.sin(t2) * sp.cos(alpha2) * a3 + sp.sin(t3) * (sp.sin(t2) * sp.sin(alpha2) * d3 + sp.cos(t2) * a2 + a1)) * a2 * sp.sin(alpha1))
    else:
        return lambda t2, t3: a3 * (((math.cos(t2) * math.sin(alpha2) * d2 - math.sin(t2) * a2 * math.cos(alpha2)) * math.sin(alpha1) + a1 * math.sin(t2) * math.cos(alpha1) * math.sin(alpha2)) * a3 * math.cos(t3) ** 2 + (((a1 * math.sin(t3) * a3 - d2 * d3 * math.sin(t2)) * math.cos(alpha2) ** 2 - math.sin(alpha2) * (math.sin(t2) * math.sin(t3) * a3 * d2 + a1 * d3) * math.cos(alpha2) + math.cos(t2) * a2 * d2 * math.sin(alpha2) + d2 * d3 * math.sin(t2) - math.sin(t3) * a3 * (math.cos(t2) * a2 + a1)) * math.sin(alpha1) + a1 * math.cos(alpha1) * (math.cos(t2) * math.sin(t3) * math.cos(alpha2) * math.sin(alpha2) * a3 + math.cos(t2) * d3 * math.cos(alpha2) ** 2 + math.sin(t2) * math.sin(alpha2) * a2 - math.cos(t2) * d3)) * math.cos(t3) - (-math.sin(t2) * math.cos(alpha2) * a3 + math.sin(t3) * (math.sin(t2) * math.sin(alpha2) * d3 + math.cos(t2) * a2 + a1)) * a2 * math.sin(alpha1))


def solve_for_t1t2(d_list, a_list, alpha_list, t3, rho, z, x=None):
    if x is None:
        x_val = 0
        y_val = rho
    else:
        x_val = x
        y_val = np.sqrt(rho ** 2 - x_val ** 2)

    d1, d2, d3 = d_list
    a1, a2, a3 = a_list
    alpha1, alpha2, alpha3 = alpha_list
    t2 = var('t2')

    expr1 = (((-math.cos(t3) ** 2 * a3 ** 2 + a3 ** 2 - d3 ** 2) * math.cos(alpha2) ** 2 - 2 * math.sin(t3) * math.sin(
        alpha2) * a3 * d3 * math.cos(alpha2) - math.cos(t3) ** 2 * a3 ** 2 - 2 * a2 * a3 * math.cos(
        t3) - a2 ** 2 + d3 ** 2) * cos(t2) ** 2 + 2 * sin(t2) * (
                         math.sin(t3) * math.cos(alpha2) * a3 - math.sin(alpha2) * d3) * (math.cos(t3) * a3 + a2) * cos(
        t2) + (-math.cos(t3) ** 2 * a3 ** 2 + a3 ** 2 - d3 ** 2) * math.cos(alpha2) ** 2 - 2 * d3 * (
                         math.sin(t3) * math.sin(alpha2) * a3 + d2) * math.cos(alpha2) + 2 * math.cos(
        t3) ** 2 * a3 ** 2 - 2 * math.sin(alpha2) * math.sin(t3) * a3 * d2 + 2 * a2 * a3 * math.cos(
        t3) + a2 ** 2 - a3 ** 2 - d2 ** 2) * math.cos(alpha1) ** 2 + 2 * ((-2 * math.sin(t3) * a3 * d3 * math.cos(
        alpha2) ** 2 + (math.cos(t3) ** 2 * math.sin(alpha2) * a3 ** 2 + (-a3 ** 2 + d3 ** 2) * math.sin(
        alpha2) - math.sin(t3) * a3 * d2) * math.cos(alpha2) + d3 * (math.sin(t3) * a3 + d2 * math.sin(alpha2))) * cos(
        t2) - sin(t2) * (math.sin(t3) * math.sin(alpha2) * a3 + d3 * math.cos(alpha2) + d2) * (math.cos(
        t3) * a3 + a2)) * math.sin(alpha1) * math.cos(alpha1) + (
                        (math.cos(t3) ** 2 * a3 ** 2 - a3 ** 2 + d3 ** 2) * math.cos(alpha2) ** 2 + 2 * math.sin(
                    t3) * math.sin(alpha2) * a3 * d3 * math.cos(alpha2) + (math.cos(t3) * a3 + a2 + d3) * (
                                    math.cos(t3) * a3 + a2 - d3)) * cos(t2) ** 2 + 2 * (math.cos(t3) * a3 + a2) * (
                        -sin(t2) * math.sin(t3) * a3 * math.cos(alpha2) + sin(t2) * math.sin(alpha2) * d3 + a1) * cos(
        t2) + (-2 * a1 * sin(t2) * math.sin(t3) * a3 + 2 * d2 * d3) * math.cos(alpha2) - math.cos(t3) ** 2 * a3 ** 2 + (
                        2 * a1 * sin(t2) * d3 + 2 * math.sin(t3) * a3 * d2) * math.sin(
        alpha2) + a1 ** 2 + a3 ** 2 + d2 ** 2 + d3 ** 2 - rho ** 2

    expr2 = math.sin(alpha1) * sin(t2) * math.cos(t3) * a3 + (
                math.sin(alpha1) * cos(t2) * math.cos(alpha2) + math.cos(alpha1) * math.sin(alpha2)) * math.sin(
        t3) * a3 + (-math.sin(alpha1) * cos(t2) * math.sin(alpha2) + math.cos(alpha1) * math.cos(
        alpha2)) * d3 + math.sin(alpha1) * sin(t2) * a2 + math.cos(alpha1) * d2 - z

    t2_set1 = solve(expr1)
    t2_set2 = solve(expr2)
    theta2_found = False

    for item in t2_set1:
        expre = expr2.subs(t2, item).evalf()
        if abs(expre) < 1e-5:
            theta2_found = True
            t2 = item
            break

    if not theta2_found:
        for item in t2_set2:
            expre = expr1.subs(t2, item).evalf()
            if abs(expre) < 1e-5:
                theta2_found = True
                t2 = item
                break

    if not theta2_found:
        raise ArithmeticError("No solution for theta2 found")
    print("Solved for theta2")

    t1 = var('t1')

    x_coord = (cos(t1) * math.cos(t2) - sin(t1) * math.cos(alpha1) * math.sin(t2)) * math.cos(t3) * a3 + (-cos(t1) * math.sin(t2) * math.cos(alpha2) - sin(t1) * math.cos(alpha1) * math.cos(t2) * math.cos(alpha2) + sin(t1) * math.sin(alpha1) * math.sin(alpha2)) * math.sin(t3) * a3 + (cos(t1) * math.sin(t2) * math.sin(alpha2) + sin(t1) * math.cos(alpha1) * math.cos(t2) * math.sin(alpha2) + sin(t1) * math.sin(alpha1) * math.cos(alpha2)) * d3 + cos(t1) * math.cos(t2) * a2 - sin(t1) * math.cos(alpha1) * math.sin(t2) * a2 + sin(t1) * math.sin(alpha1) * d2 + cos(t1) * a1 - x_val
    y_coord = (sin(t1) * math.cos(t2) + cos(t1) * math.cos(alpha1) * math.sin(t2)) * math.cos(t3) * a3 + (-sin(t1) * math.sin(t2) * math.cos(alpha2) + cos(t1) * math.cos(alpha1) * math.cos(t2) * math.cos(alpha2) - cos(t1) * math.sin(alpha1) * math.sin(alpha2)) * math.sin(t3) * a3 + (sin(t1) * math.sin(t2) * math.sin(alpha2) - cos(t1) * math.cos(alpha1) * math.cos(t2) * math.sin(alpha2) - cos(t1) * math.sin(alpha1) * math.cos(alpha2)) * d3 + sin(t1) * math.cos(t2) * a2 + cos(t1) * math.cos(alpha1) * math.sin(t2) * a2 - cos(t1) * math.sin(alpha1) * d2 + sin(t1) * a1 - y_val

    t1_set1 = solve(x_coord)
    t1_set2 = solve(y_coord)
    theta1_found = False

    for item in t1_set1:
        if abs(y_coord.subs(t1, item).evalf()) < 1e-5:
            theta1_found = True
            t1 = item
            break

    if not theta1_found:
        for item in t1_set2:
            if abs(x_coord.subs(t1, item).evalf()) < 1e-5:
                theta1_found = True
                t1 = item
                break
    if not theta1_found:
        raise ArithmeticError("No solution for theta1 found")

    print("Solved for theta1")
    return [t1, t2, t3]

def get_ikin(rho=None, z=None, theta_list=None, d_list=None, a_list=None, alpha_list=None, robot_type=None, _val=False, x=None):
    if d_list is None and robot_type is None:
        robot_type = "philippe"

    if robot_type is not None:
        d_list, a_list, alpha_list = get_dh_parameters(robot=robot_type)

    d1, d2, d3 = d_list
    a1, a2, a3 = a_list
    alpha1, alpha2, alpha3 = alpha_list
    ca1 = cos(alpha1)
    sa1 = sin(alpha1)
    ca2 = cos(alpha2)
    sa2 = sin(alpha2)
    ca3 = cos(alpha3)
    sa3 = sin(alpha3)

    if theta_list is not None:
        if len(theta_list) == 2:
            theta_list = [1, theta_list[0], theta_list[1]]
        ee = get_fkin(theta_list, d_list, a_list, alpha_list)
        rho = np.sqrt(ee[0] ** 2 + ee[1] ** 2)
        z = ee[2]

    c3, s3 = var('c3, s3')

    R = rho ** 2 + z ** 2
    conic_equation = get_conic(k_R=R, k_z=z, d_list=d_list, a_list=a_list, alpha_list=alpha_list, _sym=True)
    circle_eqn = c3 ** 2 + s3 ** 2 - 1

    # print(f"{rho} and {z}")

    iks = solve([conic_equation, circle_eqn], [c3, s3])
    vector_theta3 = []
    for sol in iks:
        first_sol_imag = sol[0].as_real_imag()
        second_sol_imag = sol[1].as_real_imag()
        if abs(first_sol_imag[1]) < 1e-5 and abs(second_sol_imag[1]) < 1e-10:
            vector_theta3.append(math.atan2(second_sol_imag[0], first_sol_imag[0]))

    # solving for theta2
    final_solutions = []
    for t3_val in vector_theta3:
        all_solutions = solve_for_t1t2(d_list, a_list, alpha_list, t3_val, rho, z, x)
        final_solutions.append(all_solutions)

    return final_solutions


def draw_robot2r(theta1=PI/4, theta2=PI/4, link_lengths=None, offset=None):
    if link_lengths is None:
        link_lengths = [0.5, 1]
    if offset is None:
        offset = np.array([-2, -1, 0])

    l1, l2 = link_lengths
    point1 = np.array([0, 0, 0])
    point2 = point1 + l1 * cos(theta1)
    ee_point = point2 + l2 * cos(theta1 + theta2)
    joint1 = Circle(radius=0.1).move_to(point1)
    joint2 = Circle(radius=0.1).move_to(point2)
    ee = Dot().move_to(ee_point)

def real_solutions(sol_set):
    vector_return = []
    for sol in sol_set:
        first_sol_imag = sol[0].as_real_imag()
        second_sol_imag = sol[1].as_real_imag()
        if abs(first_sol_imag[1]) < 1e-10 and abs(second_sol_imag[1]) < 1e-10:
            vector_return.append((first_sol_imag[0], second_sol_imag[0]))

    return vector_return


def solve_conic_circle(x_cen=0, y_cen=0, major=1.5):

    c3, s3 = var('c3, s3')
    major = major
    e = np.sqrt(0.75)
    cen_x, cen_y = x_cen, y_cen
    equation_ellipse = ((c3 - cen_x) ** 2 / ((major ** 2) * (1 - e ** 2))) + ((s3 - cen_y) ** 2 / major ** 2) - 1
    equation_circle = c3 ** 2 + s3 ** 2 - 1

    solutions = solve([equation_circle, equation_ellipse], [c3, s3])
    matrix_solution = []
    for sol in solutions:
        first_sol_imag = sol[0].as_real_imag()
        second_sol_imag = sol[1].as_real_imag()
        if abs(first_sol_imag[1]) < 1e-10 and abs(second_sol_imag[1]) < 1e-10:
            matrix_solution.append([first_sol_imag[0], second_sol_imag[0]])

    return matrix_solution


def get_conic_solutions(R, z):
    c3, s3 = var('c3, s3')
    R = R
    z = z
    conic_eqn = 0.25 * R ** 2 - 3.0 * R * c3 - 1.5 * R * s3 - 4.125 * R + 6.75 * c3 ** 2 + 9.0 * c3 * s3 + 18.75 * c3 + 2.25 * s3 ** 2 - 1.83697019872103e-16 * s3 * z + 12.375 * s3 + 1.0 * z ** 2 - 1.22464679914735e-16 * z + 13.015625
    circle_eqn = c3 ** 2 + s3 ** 2 - 1

    return real_solutions(solve([conic_eqn, circle_eqn], [c3, s3]))